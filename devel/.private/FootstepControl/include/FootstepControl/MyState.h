// Generated by gencpp from file FootstepControl/MyState.msg
// DO NOT EDIT!


#ifndef FOOTSTEPCONTROL_MESSAGE_MYSTATE_H
#define FOOTSTEPCONTROL_MESSAGE_MYSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace FootstepControl
{
template <class ContainerAllocator>
struct MyState_
{
  typedef MyState_<ContainerAllocator> Type;

  MyState_()
    : cx(0.0)
    , dcx(0.0)
    , cy(0.0)
    , dcy(0.0)
    , is_left_support(0)
    , is_right_support(0)  {
    }
  MyState_(const ContainerAllocator& _alloc)
    : cx(0.0)
    , dcx(0.0)
    , cy(0.0)
    , dcy(0.0)
    , is_left_support(0)
    , is_right_support(0)  {
  (void)_alloc;
    }



   typedef double _cx_type;
  _cx_type cx;

   typedef double _dcx_type;
  _dcx_type dcx;

   typedef double _cy_type;
  _cy_type cy;

   typedef double _dcy_type;
  _dcy_type dcy;

   typedef uint8_t _is_left_support_type;
  _is_left_support_type is_left_support;

   typedef uint8_t _is_right_support_type;
  _is_right_support_type is_right_support;





  typedef boost::shared_ptr< ::FootstepControl::MyState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::FootstepControl::MyState_<ContainerAllocator> const> ConstPtr;

}; // struct MyState_

typedef ::FootstepControl::MyState_<std::allocator<void> > MyState;

typedef boost::shared_ptr< ::FootstepControl::MyState > MyStatePtr;
typedef boost::shared_ptr< ::FootstepControl::MyState const> MyStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::FootstepControl::MyState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::FootstepControl::MyState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::FootstepControl::MyState_<ContainerAllocator1> & lhs, const ::FootstepControl::MyState_<ContainerAllocator2> & rhs)
{
  return lhs.cx == rhs.cx &&
    lhs.dcx == rhs.dcx &&
    lhs.cy == rhs.cy &&
    lhs.dcy == rhs.dcy &&
    lhs.is_left_support == rhs.is_left_support &&
    lhs.is_right_support == rhs.is_right_support;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::FootstepControl::MyState_<ContainerAllocator1> & lhs, const ::FootstepControl::MyState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace FootstepControl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::FootstepControl::MyState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::FootstepControl::MyState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::FootstepControl::MyState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::FootstepControl::MyState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::FootstepControl::MyState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::FootstepControl::MyState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::FootstepControl::MyState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4493873f0a72e816f885a561816cfc96";
  }

  static const char* value(const ::FootstepControl::MyState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4493873f0a72e816ULL;
  static const uint64_t static_value2 = 0xf885a561816cfc96ULL;
};

template<class ContainerAllocator>
struct DataType< ::FootstepControl::MyState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "FootstepControl/MyState";
  }

  static const char* value(const ::FootstepControl::MyState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::FootstepControl::MyState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 cx\n"
"float64 dcx\n"
"float64 cy\n"
"float64 dcy\n"
"uint8 is_left_support\n"
"uint8 is_right_support\n"
;
  }

  static const char* value(const ::FootstepControl::MyState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::FootstepControl::MyState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cx);
      stream.next(m.dcx);
      stream.next(m.cy);
      stream.next(m.dcy);
      stream.next(m.is_left_support);
      stream.next(m.is_right_support);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MyState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::FootstepControl::MyState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::FootstepControl::MyState_<ContainerAllocator>& v)
  {
    s << indent << "cx: ";
    Printer<double>::stream(s, indent + "  ", v.cx);
    s << indent << "dcx: ";
    Printer<double>::stream(s, indent + "  ", v.dcx);
    s << indent << "cy: ";
    Printer<double>::stream(s, indent + "  ", v.cy);
    s << indent << "dcy: ";
    Printer<double>::stream(s, indent + "  ", v.dcy);
    s << indent << "is_left_support: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_left_support);
    s << indent << "is_right_support: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_right_support);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FOOTSTEPCONTROL_MESSAGE_MYSTATE_H
