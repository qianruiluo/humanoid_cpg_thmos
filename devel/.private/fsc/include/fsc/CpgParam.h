// Generated by gencpp from file fsc/CpgParam.msg
// DO NOT EDIT!


#ifndef FSC_MESSAGE_CPGPARAM_H
#define FSC_MESSAGE_CPGPARAM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fsc
{
template <class ContainerAllocator>
struct CpgParam_
{
  typedef CpgParam_<ContainerAllocator> Type;

  CpgParam_()
    : ax(0.0)
    , ay(0.0)
    , ar(0.0)
    , T(0.0)  {
    }
  CpgParam_(const ContainerAllocator& _alloc)
    : ax(0.0)
    , ay(0.0)
    , ar(0.0)
    , T(0.0)  {
  (void)_alloc;
    }



   typedef double _ax_type;
  _ax_type ax;

   typedef double _ay_type;
  _ay_type ay;

   typedef double _ar_type;
  _ar_type ar;

   typedef double _T_type;
  _T_type T;





  typedef boost::shared_ptr< ::fsc::CpgParam_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fsc::CpgParam_<ContainerAllocator> const> ConstPtr;

}; // struct CpgParam_

typedef ::fsc::CpgParam_<std::allocator<void> > CpgParam;

typedef boost::shared_ptr< ::fsc::CpgParam > CpgParamPtr;
typedef boost::shared_ptr< ::fsc::CpgParam const> CpgParamConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fsc::CpgParam_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fsc::CpgParam_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fsc::CpgParam_<ContainerAllocator1> & lhs, const ::fsc::CpgParam_<ContainerAllocator2> & rhs)
{
  return lhs.ax == rhs.ax &&
    lhs.ay == rhs.ay &&
    lhs.ar == rhs.ar &&
    lhs.T == rhs.T;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fsc::CpgParam_<ContainerAllocator1> & lhs, const ::fsc::CpgParam_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fsc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fsc::CpgParam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fsc::CpgParam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fsc::CpgParam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fsc::CpgParam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fsc::CpgParam_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fsc::CpgParam_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fsc::CpgParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f9655a65c5483d537755b7beecffd1fb";
  }

  static const char* value(const ::fsc::CpgParam_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf9655a65c5483d53ULL;
  static const uint64_t static_value2 = 0x7755b7beecffd1fbULL;
};

template<class ContainerAllocator>
struct DataType< ::fsc::CpgParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fsc/CpgParam";
  }

  static const char* value(const ::fsc::CpgParam_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fsc::CpgParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 ax\n"
"float64 ay\n"
"float64 ar\n"
"float64 T\n"
;
  }

  static const char* value(const ::fsc::CpgParam_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fsc::CpgParam_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ax);
      stream.next(m.ay);
      stream.next(m.ar);
      stream.next(m.T);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CpgParam_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fsc::CpgParam_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fsc::CpgParam_<ContainerAllocator>& v)
  {
    s << indent << "ax: ";
    Printer<double>::stream(s, indent + "  ", v.ax);
    s << indent << "ay: ";
    Printer<double>::stream(s, indent + "  ", v.ay);
    s << indent << "ar: ";
    Printer<double>::stream(s, indent + "  ", v.ar);
    s << indent << "T: ";
    Printer<double>::stream(s, indent + "  ", v.T);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FSC_MESSAGE_CPGPARAM_H
