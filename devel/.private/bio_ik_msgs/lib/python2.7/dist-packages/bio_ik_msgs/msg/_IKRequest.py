# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bio_ik_msgs/IKRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import bio_ik_msgs.msg
import genpy
import geometry_msgs.msg
import moveit_msgs.msg
import object_recognition_msgs.msg
import sensor_msgs.msg
import shape_msgs.msg
import std_msgs.msg
import trajectory_msgs.msg

class IKRequest(genpy.Message):
  _md5sum = "c18863357cc1a388fef1f1f38d21ec53"
  _type = "bio_ik_msgs/IKRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Name of the rosparam parameter from which to load the robot model
# default: "robot_description"
string robot_description

# Name of the move group for which to compute IK
# Only joints that are part of the specified move group will be modified by the IK solver
string group_name

# If no accurate solution could be found and approximate is false,
# no solution will be returned. If approximate is true, the best
# approximate solution will be returned, even if no accurate solution could be found.
bool approximate

# IK timeout
# If no solution could be found within the specified timeout, the IK request is canceled
# and if return_approximate_solution is false, no solution is returned.
duration timeout

# Joints specified as fixed_joints will always keep their initial positions and will
# not be moved by the IK solver
string[] fixed_joints

# Initial robot state from which to start looking for IK solutions
moveit_msgs/RobotState robot_state

# If true, IK results will be checked for collisions, and IK results that result in collisions
# will be rejected.
# Collision checking requires a moveit planning scene to be present. If no planning scene was found
# the bio_ik_service node will print a ROS_ERROR message on startup or during the first collision
# aware IK request.
bool avoid_collisions

# Typed goal lists
PositionGoal[] position_goals
OrientationGoal[] orientation_goals
PoseGoal[] pose_goals
LookAtGoal[] look_at_goals
MinDistanceGoal[] min_distance_goals
MaxDistanceGoal[] max_distance_goals
LineGoal[] line_goals
TouchGoal[] touch_goals
AvoidJointLimitsGoal[] avoid_joint_limits_goals
CenterJointsGoal[] center_joints_goals
MinimalDisplacementGoal[] minimal_displacement_goals
JointVariableGoal[] joint_variable_goals
BalanceGoal[] balance_goals
SideGoal[] side_goals
DirectionGoal[] direction_goals
ConeGoal[] cone_goals

================================================================================
MSG: moveit_msgs/RobotState
# This message contains information about the robot state, i.e. the positions of its joints and links
sensor_msgs/JointState joint_state

# Joints that may have multiple DOF are specified here
sensor_msgs/MultiDOFJointState multi_dof_joint_state

# Attached collision objects (attached to some link on the robot)
AttachedCollisionObject[] attached_collision_objects

# Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene
# This is mostly important for handling the attached bodies (whether or not to clear the attached bodies
# of a moveit::core::RobotState before updating it with this message)
bool is_diff

================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sensor_msgs/MultiDOFJointState
# Representation of state for joints with multiple degrees of freedom, 
# following the structure of JointState.
#
# It is assumed that a joint in a system corresponds to a transform that gets applied 
# along the kinematic chain. For example, a planar joint (as in URDF) is 3DOF (x, y, yaw)
# and those 3DOF can be expressed as a transformation matrix, and that transformation
# matrix can be converted back to (x, y, yaw)
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# wrench associated with them, you can leave the wrench array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.

Header header

string[] joint_names
geometry_msgs/Transform[] transforms
geometry_msgs/Twist[] twist
geometry_msgs/Wrench[] wrench

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: moveit_msgs/AttachedCollisionObject
# The CollisionObject will be attached with a fixed joint to this link
string link_name

#This contains the actual shapes and poses for the CollisionObject
#to be attached to the link
#If action is remove and no object.id is set, all objects
#attached to the link indicated by link_name will be removed
CollisionObject object

# The set of links that the attached objects are allowed to touch
# by default - the link_name is already considered by default
string[] touch_links

# If certain links were placed in a particular posture for this object to remain attached 
# (e.g., an end effector closing around an object), the posture necessary for releasing
# the object is stored here
trajectory_msgs/JointTrajectory detach_posture

# The weight of the attached object, if known
float64 weight

================================================================================
MSG: moveit_msgs/CollisionObject
# A header, used for interpreting the poses
Header header

# The id of the object (name used in MoveIt)
string id

# The object type in a database of known objects
object_recognition_msgs/ObjectType type

# The collision geometries associated with the object.
# Their poses are with respect to the specified header

# Solid geometric primitives
shape_msgs/SolidPrimitive[] primitives
geometry_msgs/Pose[] primitive_poses

# Meshes
shape_msgs/Mesh[] meshes
geometry_msgs/Pose[] mesh_poses

# Bounding planes (equation is specified, but the plane can be oriented using an additional pose)
shape_msgs/Plane[] planes
geometry_msgs/Pose[] plane_poses

# Adds the object to the planning scene. If the object previously existed, it is replaced.
byte ADD=0

# Removes the object from the environment entirely (everything that matches the specified id)
byte REMOVE=1

# Append to an object that already exists in the planning scene. If the object does not exist, it is added.
byte APPEND=2

# If an object already exists in the scene, new poses can be sent (the geometry arrays must be left empty)
# if solely moving the object is desired
byte MOVE=3

# Operation to be performed
byte operation

================================================================================
MSG: object_recognition_msgs/ObjectType
################################################## OBJECT ID #########################################################

# Contains information about the type of a found object. Those two sets of parameters together uniquely define an
# object

# The key of the found object: the unique identifier in the given db
string key

# The db parameters stored as a JSON/compressed YAML string. An object id does not make sense without the corresponding
# database. E.g., in object_recognition, it can look like: "{'type':'CouchDB', 'root':'http://localhost'}"
# There is no conventional format for those parameters and it's nice to keep that flexibility.
# The object_recognition_core as a generic DB type that can read those fields
# Current examples:
# For CouchDB:
#   type: 'CouchDB'
#   root: 'http://localhost:5984'
#   collection: 'object_recognition'
# For SQL household database:
#   type: 'SqlHousehold'
#   host: 'wgs36'
#   port: 5432
#   user: 'willow'
#   password: 'willow'
#   name: 'household_objects'
#   module: 'tabletop'
string db

================================================================================
MSG: shape_msgs/SolidPrimitive
# Define box, sphere, cylinder, cone 
# All shapes are defined to have their bounding boxes centered around 0,0,0.

uint8 BOX=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 CONE=4

# The type of the shape
uint8 type


# The dimensions of the shape
float64[] dimensions

# The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array

# For the BOX type, the X, Y, and Z dimensions are the length of the corresponding
# sides of the box.
uint8 BOX_X=0
uint8 BOX_Y=1
uint8 BOX_Z=2


# For the SPHERE type, only one component is used, and it gives the radius of
# the sphere.
uint8 SPHERE_RADIUS=0


# For the CYLINDER and CONE types, the center line is oriented along
# the Z axis.  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component
# of dimensions gives the height of the cylinder (cone).  The
# CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the
# radius of the base of the cylinder (cone).  Cone and cylinder
# primitives are defined to be circular. The tip of the cone is
# pointing up, along +Z axis.

uint8 CYLINDER_HEIGHT=0
uint8 CYLINDER_RADIUS=1

uint8 CONE_HEIGHT=0
uint8 CONE_RADIUS=1

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: shape_msgs/Mesh
# Definition of a mesh

# list of triangles; the index values refer to positions in vertices[]
MeshTriangle[] triangles

# the actual vertices that make up the mesh
geometry_msgs/Point[] vertices

================================================================================
MSG: shape_msgs/MeshTriangle
# Definition of a triangle's vertices
uint32[3] vertex_indices

================================================================================
MSG: shape_msgs/Plane
# Representation of a plane, using the plane equation ax + by + cz + d = 0

# a := coef[0]
# b := coef[1]
# c := coef[2]
# d := coef[3]

float64[4] coef

================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points

================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

================================================================================
MSG: bio_ik_msgs/PositionGoal
# The name of this goal's end effector link
string link_name

# Weight of the current goal
# Goals with a higher weight will have a stronger influence than goals with a smaller weight
float64 weight

# The goal position into which the end effector link shall be brought
geometry_msgs/Point position

================================================================================
MSG: bio_ik_msgs/OrientationGoal
# The name of this goal's end effector link
string link_name

# Weight of the current goal
# Goals with a higher weight will have a stronger influence than goals with a smaller weight
float64 weight

# The goal orientation into which the end effector link shall be brought
geometry_msgs/Quaternion orientation

================================================================================
MSG: bio_ik_msgs/PoseGoal
# The name of this goal's end effector link
string link_name

# Weight of the current goal
# Goals with a higher weight will have a stronger influence than goals with a smaller weight
float64 weight

# The goal pose into which the end effector link shall be brought
geometry_msgs/Pose pose

# How rotational errors will be weighted in relation to positional errors
float64 rotation_scale

================================================================================
MSG: bio_ik_msgs/LookAtGoal
# The name of this goal's end effector link
string link_name

# Weight of the current goal
# Goals with a higher weight will have a stronger influence than goals with a smaller weight
float64 weight

# The axis in the link's local coordinate frame which shall point towards the target
geometry_msgs/Vector3 axis

# The target point which the axis shall point at
geometry_msgs/Point target

================================================================================
MSG: bio_ik_msgs/MinDistanceGoal
# The name of this goal's end effector link
string link_name

# Weight of the current goal
# Goals with a higher weight will have a stronger influence than goals with a smaller weight
float64 weight

# The distance will be computed from the origin of the end effector link to the target point
geometry_msgs/Point target

# Minimum allowed distance
# Forces the end effector link to be at least the specified distance away from the target
float64 distance

================================================================================
MSG: bio_ik_msgs/MaxDistanceGoal
# The name of this goal's end effector link
string link_name

# Weight of the current goal
# Goals with a higher weight will have a stronger influence than goals with a smaller weight
float64 weight

# The distance will be computed from the origin of the end effector link to the target point
geometry_msgs/Point target

# Maximum allowed distance
# Forces the end effector link to be at most the specified distance away from the target
float64 distance

================================================================================
MSG: bio_ik_msgs/LineGoal
# The name of this goal's end effector link
string link_name

# Weight of the current goal
# Goals with a higher weight will have a stronger influence than goals with a smaller weight
float64 weight

# A point on the line
geometry_msgs/Point position

# Direction of the line
geometry_msgs/Vector3 direction

================================================================================
MSG: bio_ik_msgs/TouchGoal
# The name of this goal's end effector link
string link_name

# Weight of the current goal
# Goals with a higher weight will have a stronger influence than goals with a smaller weight
float64 weight

# A point on the plane that shall be touched by the end effector link mesh
geometry_msgs/Point position

# The normal of the plane that shall be touched by the end effector link mesh
geometry_msgs/Vector3 normal

================================================================================
MSG: bio_ik_msgs/AvoidJointLimitsGoal
# Weight of the current goal
# Goals with a higher weight will have a stronger influence than goals with a smaller weight
float64 weight

# If set to true, the goal will be primary goal (like eg. position goals)
# If set to false, this goal will always have lower priority than the primary goals
bool primary

================================================================================
MSG: bio_ik_msgs/CenterJointsGoal
# Weight of the current goal
# Goals with a higher weight will have a stronger influence than goals with a smaller weight
float64 weight

# If set to true, the goal will be primary goal (like eg. position goals)
# If set to false, this goal will always have lower priority than the primary goals
bool primary

================================================================================
MSG: bio_ik_msgs/MinimalDisplacementGoal
# Weight of the current goal
# Goals with a higher weight will have a stronger influence than goals with a smaller weight
float64 weight

# If set to true, the goal will be primary goal (like eg. position goals)
# If set to false, this goal will always have lower priority than the primary goals
bool primary

================================================================================
MSG: bio_ik_msgs/JointVariableGoal
# The name of the joint variable
string variable_name

# The desired position value of the joint variable
float64 variable_position

# Weight of the current goal
# Goals with a higher weight will have a stronger influence than goals with a smaller weight
float64 weight

# If set to false, the goal will be primary goal (like eg. position goals)
# If set to true, this goal will always have lower priority than the primary goals
bool secondary

================================================================================
MSG: bio_ik_msgs/BalanceGoal
# Weight of the current goal
# Goals with a higher weight will have a stronger influence than goals with a smaller weight
float64 weight

# The center of gravity will be pulled above this target point
geometry_msgs/Point target

# Gravity vector (optional)
geometry_msgs/Vector3 axis

================================================================================
MSG: bio_ik_msgs/SideGoal
# The name of this goal's end effector link
string link_name

# Weight of the current goal
# Goals with a higher weight will have a stronger influence than goals with a smaller weight
float64 weight

geometry_msgs/Vector3 axis

geometry_msgs/Vector3 direction

================================================================================
MSG: bio_ik_msgs/DirectionGoal
# The name of this goal's end effector link
string link_name

# Weight of the current goal
# Goals with a higher weight will have a stronger influence than goals with a smaller weight
float64 weight

geometry_msgs/Vector3 axis

geometry_msgs/Vector3 direction

================================================================================
MSG: bio_ik_msgs/ConeGoal
# The name of this goal's end effector link
string link_name

# Weight of the current goal
# Goals with a higher weight will have a stronger influence than goals with a smaller weight
float64 weight

geometry_msgs/Point position
float64 position_weight
geometry_msgs/Vector3 axis
geometry_msgs/Vector3 direction
float64 angle
"""
  __slots__ = ['robot_description','group_name','approximate','timeout','fixed_joints','robot_state','avoid_collisions','position_goals','orientation_goals','pose_goals','look_at_goals','min_distance_goals','max_distance_goals','line_goals','touch_goals','avoid_joint_limits_goals','center_joints_goals','minimal_displacement_goals','joint_variable_goals','balance_goals','side_goals','direction_goals','cone_goals']
  _slot_types = ['string','string','bool','duration','string[]','moveit_msgs/RobotState','bool','bio_ik_msgs/PositionGoal[]','bio_ik_msgs/OrientationGoal[]','bio_ik_msgs/PoseGoal[]','bio_ik_msgs/LookAtGoal[]','bio_ik_msgs/MinDistanceGoal[]','bio_ik_msgs/MaxDistanceGoal[]','bio_ik_msgs/LineGoal[]','bio_ik_msgs/TouchGoal[]','bio_ik_msgs/AvoidJointLimitsGoal[]','bio_ik_msgs/CenterJointsGoal[]','bio_ik_msgs/MinimalDisplacementGoal[]','bio_ik_msgs/JointVariableGoal[]','bio_ik_msgs/BalanceGoal[]','bio_ik_msgs/SideGoal[]','bio_ik_msgs/DirectionGoal[]','bio_ik_msgs/ConeGoal[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robot_description,group_name,approximate,timeout,fixed_joints,robot_state,avoid_collisions,position_goals,orientation_goals,pose_goals,look_at_goals,min_distance_goals,max_distance_goals,line_goals,touch_goals,avoid_joint_limits_goals,center_joints_goals,minimal_displacement_goals,joint_variable_goals,balance_goals,side_goals,direction_goals,cone_goals

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IKRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.robot_description is None:
        self.robot_description = ''
      if self.group_name is None:
        self.group_name = ''
      if self.approximate is None:
        self.approximate = False
      if self.timeout is None:
        self.timeout = genpy.Duration()
      if self.fixed_joints is None:
        self.fixed_joints = []
      if self.robot_state is None:
        self.robot_state = moveit_msgs.msg.RobotState()
      if self.avoid_collisions is None:
        self.avoid_collisions = False
      if self.position_goals is None:
        self.position_goals = []
      if self.orientation_goals is None:
        self.orientation_goals = []
      if self.pose_goals is None:
        self.pose_goals = []
      if self.look_at_goals is None:
        self.look_at_goals = []
      if self.min_distance_goals is None:
        self.min_distance_goals = []
      if self.max_distance_goals is None:
        self.max_distance_goals = []
      if self.line_goals is None:
        self.line_goals = []
      if self.touch_goals is None:
        self.touch_goals = []
      if self.avoid_joint_limits_goals is None:
        self.avoid_joint_limits_goals = []
      if self.center_joints_goals is None:
        self.center_joints_goals = []
      if self.minimal_displacement_goals is None:
        self.minimal_displacement_goals = []
      if self.joint_variable_goals is None:
        self.joint_variable_goals = []
      if self.balance_goals is None:
        self.balance_goals = []
      if self.side_goals is None:
        self.side_goals = []
      if self.direction_goals is None:
        self.direction_goals = []
      if self.cone_goals is None:
        self.cone_goals = []
    else:
      self.robot_description = ''
      self.group_name = ''
      self.approximate = False
      self.timeout = genpy.Duration()
      self.fixed_joints = []
      self.robot_state = moveit_msgs.msg.RobotState()
      self.avoid_collisions = False
      self.position_goals = []
      self.orientation_goals = []
      self.pose_goals = []
      self.look_at_goals = []
      self.min_distance_goals = []
      self.max_distance_goals = []
      self.line_goals = []
      self.touch_goals = []
      self.avoid_joint_limits_goals = []
      self.center_joints_goals = []
      self.minimal_displacement_goals = []
      self.joint_variable_goals = []
      self.balance_goals = []
      self.side_goals = []
      self.direction_goals = []
      self.cone_goals = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.robot_description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.group_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B2i().pack(_x.approximate, _x.timeout.secs, _x.timeout.nsecs))
      length = len(self.fixed_joints)
      buff.write(_struct_I.pack(length))
      for val1 in self.fixed_joints:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self
      buff.write(_get_struct_3I().pack(_x.robot_state.joint_state.header.seq, _x.robot_state.joint_state.header.stamp.secs, _x.robot_state.joint_state.header.stamp.nsecs))
      _x = self.robot_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.robot_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.robot_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.robot_state.joint_state.position))
      length = len(self.robot_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.robot_state.joint_state.velocity))
      length = len(self.robot_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.robot_state.joint_state.effort))
      _x = self
      buff.write(_get_struct_3I().pack(_x.robot_state.multi_dof_joint_state.header.seq, _x.robot_state.multi_dof_joint_state.header.stamp.secs, _x.robot_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.robot_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.robot_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.robot_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_state.multi_dof_joint_state.transforms:
        _v1 = val1.translation
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.rotation
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.robot_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_state.multi_dof_joint_state.twist:
        _v3 = val1.linear
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v4 = val1.angular
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.robot_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_state.multi_dof_joint_state.wrench:
        _v5 = val1.force
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = val1.torque
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.robot_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v7 = val1.object
        _v8 = _v7.header
        _x = _v8.seq
        buff.write(_get_struct_I().pack(_x))
        _v9 = _v8.stamp
        _x = _v9
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v8.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v7.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v10 = _v7.type
        _x = _v10.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v10.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v7.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.dimensions))
        length = len(_v7.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.primitive_poses:
          _v11 = val3.position
          _x = _v11
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v12 = val3.orientation
          _x = _v12
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v7.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_get_struct_3I().pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v7.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.mesh_poses:
          _v13 = val3.position
          _x = _v13
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v14 = val3.orientation
          _x = _v14
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v7.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.planes:
          buff.write(_get_struct_4d().pack(*val3.coef))
        length = len(_v7.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.plane_poses:
          _v15 = val3.position
          _x = _v15
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v16 = val3.orientation
          _x = _v16
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v7.operation
        buff.write(_get_struct_b().pack(_x))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _v17 = val1.detach_posture
        _v18 = _v17.header
        _x = _v18.seq
        buff.write(_get_struct_I().pack(_x))
        _v19 = _v18.stamp
        _x = _v19
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v18.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v17.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v17.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v17.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v17.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v20 = val3.time_from_start
          _x = _v20
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.robot_state.is_diff, _x.avoid_collisions))
      length = len(self.position_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.position_goals:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
        _v21 = val1.position
        _x = _v21
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.orientation_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.orientation_goals:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
        _v22 = val1.orientation
        _x = _v22
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.pose_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.pose_goals:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
        _v23 = val1.pose
        _v24 = _v23.position
        _x = _v24
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v25 = _v23.orientation
        _x = _v25
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.rotation_scale
        buff.write(_get_struct_d().pack(_x))
      length = len(self.look_at_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.look_at_goals:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
        _v26 = val1.axis
        _x = _v26
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v27 = val1.target
        _x = _v27
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.min_distance_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.min_distance_goals:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
        _v28 = val1.target
        _x = _v28
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.distance
        buff.write(_get_struct_d().pack(_x))
      length = len(self.max_distance_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.max_distance_goals:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
        _v29 = val1.target
        _x = _v29
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.distance
        buff.write(_get_struct_d().pack(_x))
      length = len(self.line_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.line_goals:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
        _v30 = val1.position
        _x = _v30
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v31 = val1.direction
        _x = _v31
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.touch_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.touch_goals:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
        _v32 = val1.position
        _x = _v32
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v33 = val1.normal
        _x = _v33
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.avoid_joint_limits_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.avoid_joint_limits_goals:
        _x = val1
        buff.write(_get_struct_dB().pack(_x.weight, _x.primary))
      length = len(self.center_joints_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.center_joints_goals:
        _x = val1
        buff.write(_get_struct_dB().pack(_x.weight, _x.primary))
      length = len(self.minimal_displacement_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.minimal_displacement_goals:
        _x = val1
        buff.write(_get_struct_dB().pack(_x.weight, _x.primary))
      length = len(self.joint_variable_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_variable_goals:
        _x = val1.variable_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2dB().pack(_x.variable_position, _x.weight, _x.secondary))
      length = len(self.balance_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.balance_goals:
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
        _v34 = val1.target
        _x = _v34
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v35 = val1.axis
        _x = _v35
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.side_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.side_goals:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
        _v36 = val1.axis
        _x = _v36
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v37 = val1.direction
        _x = _v37
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.direction_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.direction_goals:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
        _v38 = val1.axis
        _x = _v38
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v39 = val1.direction
        _x = _v39
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.cone_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.cone_goals:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
        _v40 = val1.position
        _x = _v40
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.position_weight
        buff.write(_get_struct_d().pack(_x))
        _v41 = val1.axis
        _x = _v41
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v42 = val1.direction
        _x = _v42
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.angle
        buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.timeout is None:
        self.timeout = genpy.Duration()
      if self.robot_state is None:
        self.robot_state = moveit_msgs.msg.RobotState()
      if self.position_goals is None:
        self.position_goals = None
      if self.orientation_goals is None:
        self.orientation_goals = None
      if self.pose_goals is None:
        self.pose_goals = None
      if self.look_at_goals is None:
        self.look_at_goals = None
      if self.min_distance_goals is None:
        self.min_distance_goals = None
      if self.max_distance_goals is None:
        self.max_distance_goals = None
      if self.line_goals is None:
        self.line_goals = None
      if self.touch_goals is None:
        self.touch_goals = None
      if self.avoid_joint_limits_goals is None:
        self.avoid_joint_limits_goals = None
      if self.center_joints_goals is None:
        self.center_joints_goals = None
      if self.minimal_displacement_goals is None:
        self.minimal_displacement_goals = None
      if self.joint_variable_goals is None:
        self.joint_variable_goals = None
      if self.balance_goals is None:
        self.balance_goals = None
      if self.side_goals is None:
        self.side_goals = None
      if self.direction_goals is None:
        self.direction_goals = None
      if self.cone_goals is None:
        self.cone_goals = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_description = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_description = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.group_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.group_name = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.approximate, _x.timeout.secs, _x.timeout.nsecs,) = _get_struct_B2i().unpack(str[start:end])
      self.approximate = bool(self.approximate)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fixed_joints = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.fixed_joints.append(val1)
      _x = self
      start = end
      end += 12
      (_x.robot_state.joint_state.header.seq, _x.robot_state.joint_state.header.stamp.secs, _x.robot_state.joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_state.joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.robot_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.robot_state.joint_state.position = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.robot_state.joint_state.velocity = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.robot_state.joint_state.effort = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.robot_state.multi_dof_joint_state.header.seq, _x.robot_state.multi_dof_joint_state.header.stamp.secs, _x.robot_state.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.robot_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v43 = val1.translation
        _x = _v43
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v44 = val1.rotation
        _x = _v44
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.robot_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v45 = val1.linear
        _x = _v45
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v46 = val1.angular
        _x = _v46
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.robot_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v47 = val1.force
        _x = _v47
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v48 = val1.torque
        _x = _v48
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.robot_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v49 = val1.object
        _v50 = _v49.header
        start = end
        end += 4
        (_v50.seq,) = _get_struct_I().unpack(str[start:end])
        _v51 = _v50.stamp
        _x = _v51
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v50.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v50.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v49.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v49.id = str[start:end]
        _v52 = _v49.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v52.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v52.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v52.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v52.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v49.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = s.unpack(str[start:end])
          _v49.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v49.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v53 = val3.position
          _x = _v53
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v54 = val3.orientation
          _x = _v54
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v49.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v49.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v49.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v49.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v55 = val3.position
          _x = _v55
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v56 = val3.orientation
          _x = _v56
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v49.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v49.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = _get_struct_4d().unpack(str[start:end])
          _v49.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v49.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v57 = val3.position
          _x = _v57
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v58 = val3.orientation
          _x = _v58
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v49.plane_poses.append(val3)
        start = end
        end += 1
        (_v49.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v59 = val1.detach_posture
        _v60 = _v59.header
        start = end
        end += 4
        (_v60.seq,) = _get_struct_I().unpack(str[start:end])
        _v61 = _v60.stamp
        _x = _v61
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v60.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v60.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v59.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v59.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v59.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v62 = val3.time_from_start
          _x = _v62
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v59.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.robot_state.attached_collision_objects.append(val1)
      _x = self
      start = end
      end += 2
      (_x.robot_state.is_diff, _x.avoid_collisions,) = _get_struct_2B().unpack(str[start:end])
      self.robot_state.is_diff = bool(self.robot_state.is_diff)
      self.avoid_collisions = bool(self.avoid_collisions)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.position_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.PositionGoal()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        _v63 = val1.position
        _x = _v63
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.position_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.orientation_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.OrientationGoal()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        _v64 = val1.orientation
        _x = _v64
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.orientation_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pose_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.PoseGoal()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        _v65 = val1.pose
        _v66 = _v65.position
        _x = _v66
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v67 = _v65.orientation
        _x = _v67
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 8
        (val1.rotation_scale,) = _get_struct_d().unpack(str[start:end])
        self.pose_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.look_at_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.LookAtGoal()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        _v68 = val1.axis
        _x = _v68
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v69 = val1.target
        _x = _v69
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.look_at_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.min_distance_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.MinDistanceGoal()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        _v70 = val1.target
        _x = _v70
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.distance,) = _get_struct_d().unpack(str[start:end])
        self.min_distance_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.max_distance_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.MaxDistanceGoal()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        _v71 = val1.target
        _x = _v71
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.distance,) = _get_struct_d().unpack(str[start:end])
        self.max_distance_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.line_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.LineGoal()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        _v72 = val1.position
        _x = _v72
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v73 = val1.direction
        _x = _v73
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.line_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.touch_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.TouchGoal()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        _v74 = val1.position
        _x = _v74
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v75 = val1.normal
        _x = _v75
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.touch_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.avoid_joint_limits_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.AvoidJointLimitsGoal()
        _x = val1
        start = end
        end += 9
        (_x.weight, _x.primary,) = _get_struct_dB().unpack(str[start:end])
        val1.primary = bool(val1.primary)
        self.avoid_joint_limits_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.center_joints_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.CenterJointsGoal()
        _x = val1
        start = end
        end += 9
        (_x.weight, _x.primary,) = _get_struct_dB().unpack(str[start:end])
        val1.primary = bool(val1.primary)
        self.center_joints_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.minimal_displacement_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.MinimalDisplacementGoal()
        _x = val1
        start = end
        end += 9
        (_x.weight, _x.primary,) = _get_struct_dB().unpack(str[start:end])
        val1.primary = bool(val1.primary)
        self.minimal_displacement_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_variable_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.JointVariableGoal()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.variable_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.variable_name = str[start:end]
        _x = val1
        start = end
        end += 17
        (_x.variable_position, _x.weight, _x.secondary,) = _get_struct_2dB().unpack(str[start:end])
        val1.secondary = bool(val1.secondary)
        self.joint_variable_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.balance_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.BalanceGoal()
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        _v76 = val1.target
        _x = _v76
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v77 = val1.axis
        _x = _v77
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.balance_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.side_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.SideGoal()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        _v78 = val1.axis
        _x = _v78
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v79 = val1.direction
        _x = _v79
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.side_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.direction_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.DirectionGoal()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        _v80 = val1.axis
        _x = _v80
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v81 = val1.direction
        _x = _v81
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.direction_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cone_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.ConeGoal()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        _v82 = val1.position
        _x = _v82
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.position_weight,) = _get_struct_d().unpack(str[start:end])
        _v83 = val1.axis
        _x = _v83
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v84 = val1.direction
        _x = _v84
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.angle,) = _get_struct_d().unpack(str[start:end])
        self.cone_goals.append(val1)
      self.timeout.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.robot_description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.group_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B2i().pack(_x.approximate, _x.timeout.secs, _x.timeout.nsecs))
      length = len(self.fixed_joints)
      buff.write(_struct_I.pack(length))
      for val1 in self.fixed_joints:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self
      buff.write(_get_struct_3I().pack(_x.robot_state.joint_state.header.seq, _x.robot_state.joint_state.header.stamp.secs, _x.robot_state.joint_state.header.stamp.nsecs))
      _x = self.robot_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.robot_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.robot_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.robot_state.joint_state.position.tostring())
      length = len(self.robot_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.robot_state.joint_state.velocity.tostring())
      length = len(self.robot_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.robot_state.joint_state.effort.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.robot_state.multi_dof_joint_state.header.seq, _x.robot_state.multi_dof_joint_state.header.stamp.secs, _x.robot_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.robot_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.robot_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.robot_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_state.multi_dof_joint_state.transforms:
        _v85 = val1.translation
        _x = _v85
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v86 = val1.rotation
        _x = _v86
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.robot_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_state.multi_dof_joint_state.twist:
        _v87 = val1.linear
        _x = _v87
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v88 = val1.angular
        _x = _v88
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.robot_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_state.multi_dof_joint_state.wrench:
        _v89 = val1.force
        _x = _v89
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v90 = val1.torque
        _x = _v90
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.robot_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v91 = val1.object
        _v92 = _v91.header
        _x = _v92.seq
        buff.write(_get_struct_I().pack(_x))
        _v93 = _v92.stamp
        _x = _v93
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v92.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v91.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v94 = _v91.type
        _x = _v94.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v94.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v91.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v91.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v91.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v91.primitive_poses:
          _v95 = val3.position
          _x = _v95
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v96 = val3.orientation
          _x = _v96
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v91.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v91.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v91.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v91.mesh_poses:
          _v97 = val3.position
          _x = _v97
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v98 = val3.orientation
          _x = _v98
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v91.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v91.planes:
          buff.write(val3.coef.tostring())
        length = len(_v91.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v91.plane_poses:
          _v99 = val3.position
          _x = _v99
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v100 = val3.orientation
          _x = _v100
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v91.operation
        buff.write(_get_struct_b().pack(_x))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _v101 = val1.detach_posture
        _v102 = _v101.header
        _x = _v102.seq
        buff.write(_get_struct_I().pack(_x))
        _v103 = _v102.stamp
        _x = _v103
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v102.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v101.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v101.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v101.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v101.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v104 = val3.time_from_start
          _x = _v104
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.robot_state.is_diff, _x.avoid_collisions))
      length = len(self.position_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.position_goals:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
        _v105 = val1.position
        _x = _v105
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.orientation_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.orientation_goals:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
        _v106 = val1.orientation
        _x = _v106
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.pose_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.pose_goals:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
        _v107 = val1.pose
        _v108 = _v107.position
        _x = _v108
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v109 = _v107.orientation
        _x = _v109
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.rotation_scale
        buff.write(_get_struct_d().pack(_x))
      length = len(self.look_at_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.look_at_goals:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
        _v110 = val1.axis
        _x = _v110
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v111 = val1.target
        _x = _v111
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.min_distance_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.min_distance_goals:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
        _v112 = val1.target
        _x = _v112
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.distance
        buff.write(_get_struct_d().pack(_x))
      length = len(self.max_distance_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.max_distance_goals:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
        _v113 = val1.target
        _x = _v113
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.distance
        buff.write(_get_struct_d().pack(_x))
      length = len(self.line_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.line_goals:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
        _v114 = val1.position
        _x = _v114
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v115 = val1.direction
        _x = _v115
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.touch_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.touch_goals:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
        _v116 = val1.position
        _x = _v116
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v117 = val1.normal
        _x = _v117
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.avoid_joint_limits_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.avoid_joint_limits_goals:
        _x = val1
        buff.write(_get_struct_dB().pack(_x.weight, _x.primary))
      length = len(self.center_joints_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.center_joints_goals:
        _x = val1
        buff.write(_get_struct_dB().pack(_x.weight, _x.primary))
      length = len(self.minimal_displacement_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.minimal_displacement_goals:
        _x = val1
        buff.write(_get_struct_dB().pack(_x.weight, _x.primary))
      length = len(self.joint_variable_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_variable_goals:
        _x = val1.variable_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2dB().pack(_x.variable_position, _x.weight, _x.secondary))
      length = len(self.balance_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.balance_goals:
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
        _v118 = val1.target
        _x = _v118
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v119 = val1.axis
        _x = _v119
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.side_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.side_goals:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
        _v120 = val1.axis
        _x = _v120
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v121 = val1.direction
        _x = _v121
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.direction_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.direction_goals:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
        _v122 = val1.axis
        _x = _v122
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v123 = val1.direction
        _x = _v123
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.cone_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.cone_goals:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
        _v124 = val1.position
        _x = _v124
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.position_weight
        buff.write(_get_struct_d().pack(_x))
        _v125 = val1.axis
        _x = _v125
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v126 = val1.direction
        _x = _v126
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.angle
        buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.timeout is None:
        self.timeout = genpy.Duration()
      if self.robot_state is None:
        self.robot_state = moveit_msgs.msg.RobotState()
      if self.position_goals is None:
        self.position_goals = None
      if self.orientation_goals is None:
        self.orientation_goals = None
      if self.pose_goals is None:
        self.pose_goals = None
      if self.look_at_goals is None:
        self.look_at_goals = None
      if self.min_distance_goals is None:
        self.min_distance_goals = None
      if self.max_distance_goals is None:
        self.max_distance_goals = None
      if self.line_goals is None:
        self.line_goals = None
      if self.touch_goals is None:
        self.touch_goals = None
      if self.avoid_joint_limits_goals is None:
        self.avoid_joint_limits_goals = None
      if self.center_joints_goals is None:
        self.center_joints_goals = None
      if self.minimal_displacement_goals is None:
        self.minimal_displacement_goals = None
      if self.joint_variable_goals is None:
        self.joint_variable_goals = None
      if self.balance_goals is None:
        self.balance_goals = None
      if self.side_goals is None:
        self.side_goals = None
      if self.direction_goals is None:
        self.direction_goals = None
      if self.cone_goals is None:
        self.cone_goals = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_description = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_description = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.group_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.group_name = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.approximate, _x.timeout.secs, _x.timeout.nsecs,) = _get_struct_B2i().unpack(str[start:end])
      self.approximate = bool(self.approximate)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fixed_joints = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.fixed_joints.append(val1)
      _x = self
      start = end
      end += 12
      (_x.robot_state.joint_state.header.seq, _x.robot_state.joint_state.header.stamp.secs, _x.robot_state.joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_state.joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.robot_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.robot_state.joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.robot_state.joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.robot_state.joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.robot_state.multi_dof_joint_state.header.seq, _x.robot_state.multi_dof_joint_state.header.stamp.secs, _x.robot_state.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.robot_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v127 = val1.translation
        _x = _v127
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v128 = val1.rotation
        _x = _v128
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.robot_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v129 = val1.linear
        _x = _v129
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v130 = val1.angular
        _x = _v130
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.robot_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v131 = val1.force
        _x = _v131
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v132 = val1.torque
        _x = _v132
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.robot_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v133 = val1.object
        _v134 = _v133.header
        start = end
        end += 4
        (_v134.seq,) = _get_struct_I().unpack(str[start:end])
        _v135 = _v134.stamp
        _x = _v135
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v134.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v134.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v133.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v133.id = str[start:end]
        _v136 = _v133.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v136.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v136.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v136.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v136.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v133.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v133.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v133.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v137 = val3.position
          _x = _v137
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v138 = val3.orientation
          _x = _v138
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v133.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v133.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v133.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v133.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v139 = val3.position
          _x = _v139
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v140 = val3.orientation
          _x = _v140
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v133.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v133.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          _v133.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v133.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v141 = val3.position
          _x = _v141
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v142 = val3.orientation
          _x = _v142
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v133.plane_poses.append(val3)
        start = end
        end += 1
        (_v133.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v143 = val1.detach_posture
        _v144 = _v143.header
        start = end
        end += 4
        (_v144.seq,) = _get_struct_I().unpack(str[start:end])
        _v145 = _v144.stamp
        _x = _v145
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v144.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v144.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v143.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v143.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v143.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v146 = val3.time_from_start
          _x = _v146
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v143.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.robot_state.attached_collision_objects.append(val1)
      _x = self
      start = end
      end += 2
      (_x.robot_state.is_diff, _x.avoid_collisions,) = _get_struct_2B().unpack(str[start:end])
      self.robot_state.is_diff = bool(self.robot_state.is_diff)
      self.avoid_collisions = bool(self.avoid_collisions)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.position_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.PositionGoal()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        _v147 = val1.position
        _x = _v147
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.position_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.orientation_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.OrientationGoal()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        _v148 = val1.orientation
        _x = _v148
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.orientation_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pose_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.PoseGoal()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        _v149 = val1.pose
        _v150 = _v149.position
        _x = _v150
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v151 = _v149.orientation
        _x = _v151
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 8
        (val1.rotation_scale,) = _get_struct_d().unpack(str[start:end])
        self.pose_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.look_at_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.LookAtGoal()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        _v152 = val1.axis
        _x = _v152
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v153 = val1.target
        _x = _v153
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.look_at_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.min_distance_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.MinDistanceGoal()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        _v154 = val1.target
        _x = _v154
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.distance,) = _get_struct_d().unpack(str[start:end])
        self.min_distance_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.max_distance_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.MaxDistanceGoal()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        _v155 = val1.target
        _x = _v155
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.distance,) = _get_struct_d().unpack(str[start:end])
        self.max_distance_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.line_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.LineGoal()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        _v156 = val1.position
        _x = _v156
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v157 = val1.direction
        _x = _v157
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.line_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.touch_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.TouchGoal()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        _v158 = val1.position
        _x = _v158
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v159 = val1.normal
        _x = _v159
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.touch_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.avoid_joint_limits_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.AvoidJointLimitsGoal()
        _x = val1
        start = end
        end += 9
        (_x.weight, _x.primary,) = _get_struct_dB().unpack(str[start:end])
        val1.primary = bool(val1.primary)
        self.avoid_joint_limits_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.center_joints_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.CenterJointsGoal()
        _x = val1
        start = end
        end += 9
        (_x.weight, _x.primary,) = _get_struct_dB().unpack(str[start:end])
        val1.primary = bool(val1.primary)
        self.center_joints_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.minimal_displacement_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.MinimalDisplacementGoal()
        _x = val1
        start = end
        end += 9
        (_x.weight, _x.primary,) = _get_struct_dB().unpack(str[start:end])
        val1.primary = bool(val1.primary)
        self.minimal_displacement_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_variable_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.JointVariableGoal()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.variable_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.variable_name = str[start:end]
        _x = val1
        start = end
        end += 17
        (_x.variable_position, _x.weight, _x.secondary,) = _get_struct_2dB().unpack(str[start:end])
        val1.secondary = bool(val1.secondary)
        self.joint_variable_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.balance_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.BalanceGoal()
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        _v160 = val1.target
        _x = _v160
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v161 = val1.axis
        _x = _v161
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.balance_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.side_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.SideGoal()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        _v162 = val1.axis
        _x = _v162
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v163 = val1.direction
        _x = _v163
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.side_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.direction_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.DirectionGoal()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        _v164 = val1.axis
        _x = _v164
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v165 = val1.direction
        _x = _v165
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.direction_goals.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cone_goals = []
      for i in range(0, length):
        val1 = bio_ik_msgs.msg.ConeGoal()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        _v166 = val1.position
        _x = _v166
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.position_weight,) = _get_struct_d().unpack(str[start:end])
        _v167 = val1.axis
        _x = _v167
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v168 = val1.direction
        _x = _v168
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.angle,) = _get_struct_d().unpack(str[start:end])
        self.cone_goals.append(val1)
      self.timeout.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2dB = None
def _get_struct_2dB():
    global _struct_2dB
    if _struct_2dB is None:
        _struct_2dB = struct.Struct("<2dB")
    return _struct_2dB
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B2i = None
def _get_struct_B2i():
    global _struct_B2i
    if _struct_B2i is None:
        _struct_B2i = struct.Struct("<B2i")
    return _struct_B2i
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_dB = None
def _get_struct_dB():
    global _struct_dB
    if _struct_dB is None:
        _struct_dB = struct.Struct("<dB")
    return _struct_dB
