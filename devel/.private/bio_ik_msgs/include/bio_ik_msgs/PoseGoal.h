// Generated by gencpp from file bio_ik_msgs/PoseGoal.msg
// DO NOT EDIT!


#ifndef BIO_IK_MSGS_MESSAGE_POSEGOAL_H
#define BIO_IK_MSGS_MESSAGE_POSEGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace bio_ik_msgs
{
template <class ContainerAllocator>
struct PoseGoal_
{
  typedef PoseGoal_<ContainerAllocator> Type;

  PoseGoal_()
    : link_name()
    , weight(0.0)
    , pose()
    , rotation_scale(0.0)  {
    }
  PoseGoal_(const ContainerAllocator& _alloc)
    : link_name(_alloc)
    , weight(0.0)
    , pose(_alloc)
    , rotation_scale(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _link_name_type;
  _link_name_type link_name;

   typedef double _weight_type;
  _weight_type weight;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef double _rotation_scale_type;
  _rotation_scale_type rotation_scale;





  typedef boost::shared_ptr< ::bio_ik_msgs::PoseGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bio_ik_msgs::PoseGoal_<ContainerAllocator> const> ConstPtr;

}; // struct PoseGoal_

typedef ::bio_ik_msgs::PoseGoal_<std::allocator<void> > PoseGoal;

typedef boost::shared_ptr< ::bio_ik_msgs::PoseGoal > PoseGoalPtr;
typedef boost::shared_ptr< ::bio_ik_msgs::PoseGoal const> PoseGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bio_ik_msgs::PoseGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bio_ik_msgs::PoseGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bio_ik_msgs::PoseGoal_<ContainerAllocator1> & lhs, const ::bio_ik_msgs::PoseGoal_<ContainerAllocator2> & rhs)
{
  return lhs.link_name == rhs.link_name &&
    lhs.weight == rhs.weight &&
    lhs.pose == rhs.pose &&
    lhs.rotation_scale == rhs.rotation_scale;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bio_ik_msgs::PoseGoal_<ContainerAllocator1> & lhs, const ::bio_ik_msgs::PoseGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bio_ik_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::bio_ik_msgs::PoseGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bio_ik_msgs::PoseGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bio_ik_msgs::PoseGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bio_ik_msgs::PoseGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bio_ik_msgs::PoseGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bio_ik_msgs::PoseGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bio_ik_msgs::PoseGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab4e8566ca0cc9b21ea1ca6eeaaa55d7";
  }

  static const char* value(const ::bio_ik_msgs::PoseGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab4e8566ca0cc9b2ULL;
  static const uint64_t static_value2 = 0x1ea1ca6eeaaa55d7ULL;
};

template<class ContainerAllocator>
struct DataType< ::bio_ik_msgs::PoseGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bio_ik_msgs/PoseGoal";
  }

  static const char* value(const ::bio_ik_msgs::PoseGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bio_ik_msgs::PoseGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The name of this goal's end effector link\n"
"string link_name\n"
"\n"
"# Weight of the current goal\n"
"# Goals with a higher weight will have a stronger influence than goals with a smaller weight\n"
"float64 weight\n"
"\n"
"# The goal pose into which the end effector link shall be brought\n"
"geometry_msgs/Pose pose\n"
"\n"
"# How rotational errors will be weighted in relation to positional errors\n"
"float64 rotation_scale\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::bio_ik_msgs::PoseGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bio_ik_msgs::PoseGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.link_name);
      stream.next(m.weight);
      stream.next(m.pose);
      stream.next(m.rotation_scale);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PoseGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bio_ik_msgs::PoseGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bio_ik_msgs::PoseGoal_<ContainerAllocator>& v)
  {
    s << indent << "link_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.link_name);
    s << indent << "weight: ";
    Printer<double>::stream(s, indent + "  ", v.weight);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "rotation_scale: ";
    Printer<double>::stream(s, indent + "  ", v.rotation_scale);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BIO_IK_MSGS_MESSAGE_POSEGOAL_H
