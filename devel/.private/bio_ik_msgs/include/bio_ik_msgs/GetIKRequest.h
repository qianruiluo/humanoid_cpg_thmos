// Generated by gencpp from file bio_ik_msgs/GetIKRequest.msg
// DO NOT EDIT!


#ifndef BIO_IK_MSGS_MESSAGE_GETIKREQUEST_H
#define BIO_IK_MSGS_MESSAGE_GETIKREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <bio_ik_msgs/IKRequest.h>

namespace bio_ik_msgs
{
template <class ContainerAllocator>
struct GetIKRequest_
{
  typedef GetIKRequest_<ContainerAllocator> Type;

  GetIKRequest_()
    : ik_request()  {
    }
  GetIKRequest_(const ContainerAllocator& _alloc)
    : ik_request(_alloc)  {
  (void)_alloc;
    }



   typedef  ::bio_ik_msgs::IKRequest_<ContainerAllocator>  _ik_request_type;
  _ik_request_type ik_request;





  typedef boost::shared_ptr< ::bio_ik_msgs::GetIKRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bio_ik_msgs::GetIKRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetIKRequest_

typedef ::bio_ik_msgs::GetIKRequest_<std::allocator<void> > GetIKRequest;

typedef boost::shared_ptr< ::bio_ik_msgs::GetIKRequest > GetIKRequestPtr;
typedef boost::shared_ptr< ::bio_ik_msgs::GetIKRequest const> GetIKRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bio_ik_msgs::GetIKRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bio_ik_msgs::GetIKRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bio_ik_msgs::GetIKRequest_<ContainerAllocator1> & lhs, const ::bio_ik_msgs::GetIKRequest_<ContainerAllocator2> & rhs)
{
  return lhs.ik_request == rhs.ik_request;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bio_ik_msgs::GetIKRequest_<ContainerAllocator1> & lhs, const ::bio_ik_msgs::GetIKRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bio_ik_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::bio_ik_msgs::GetIKRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bio_ik_msgs::GetIKRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bio_ik_msgs::GetIKRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bio_ik_msgs::GetIKRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bio_ik_msgs::GetIKRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bio_ik_msgs::GetIKRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bio_ik_msgs::GetIKRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "05a37800a972d62c5bb9f38f4edec530";
  }

  static const char* value(const ::bio_ik_msgs::GetIKRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x05a37800a972d62cULL;
  static const uint64_t static_value2 = 0x5bb9f38f4edec530ULL;
};

template<class ContainerAllocator>
struct DataType< ::bio_ik_msgs::GetIKRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bio_ik_msgs/GetIKRequest";
  }

  static const char* value(const ::bio_ik_msgs::GetIKRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bio_ik_msgs::GetIKRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "IKRequest ik_request\n"
"\n"
"================================================================================\n"
"MSG: bio_ik_msgs/IKRequest\n"
"# Name of the rosparam parameter from which to load the robot model\n"
"# default: \"robot_description\"\n"
"string robot_description\n"
"\n"
"# Name of the move group for which to compute IK\n"
"# Only joints that are part of the specified move group will be modified by the IK solver\n"
"string group_name\n"
"\n"
"# If no accurate solution could be found and approximate is false,\n"
"# no solution will be returned. If approximate is true, the best\n"
"# approximate solution will be returned, even if no accurate solution could be found.\n"
"bool approximate\n"
"\n"
"# IK timeout\n"
"# If no solution could be found within the specified timeout, the IK request is canceled\n"
"# and if return_approximate_solution is false, no solution is returned.\n"
"duration timeout\n"
"\n"
"# Joints specified as fixed_joints will always keep their initial positions and will\n"
"# not be moved by the IK solver\n"
"string[] fixed_joints\n"
"\n"
"# Initial robot state from which to start looking for IK solutions\n"
"moveit_msgs/RobotState robot_state\n"
"\n"
"# If true, IK results will be checked for collisions, and IK results that result in collisions\n"
"# will be rejected.\n"
"# Collision checking requires a moveit planning scene to be present. If no planning scene was found\n"
"# the bio_ik_service node will print a ROS_ERROR message on startup or during the first collision\n"
"# aware IK request.\n"
"bool avoid_collisions\n"
"\n"
"# Typed goal lists\n"
"PositionGoal[] position_goals\n"
"OrientationGoal[] orientation_goals\n"
"PoseGoal[] pose_goals\n"
"LookAtGoal[] look_at_goals\n"
"MinDistanceGoal[] min_distance_goals\n"
"MaxDistanceGoal[] max_distance_goals\n"
"LineGoal[] line_goals\n"
"TouchGoal[] touch_goals\n"
"AvoidJointLimitsGoal[] avoid_joint_limits_goals\n"
"CenterJointsGoal[] center_joints_goals\n"
"MinimalDisplacementGoal[] minimal_displacement_goals\n"
"JointVariableGoal[] joint_variable_goals\n"
"BalanceGoal[] balance_goals\n"
"SideGoal[] side_goals\n"
"DirectionGoal[] direction_goals\n"
"ConeGoal[] cone_goals\n"
"\n"
"================================================================================\n"
"MSG: moveit_msgs/RobotState\n"
"# This message contains information about the robot state, i.e. the positions of its joints and links\n"
"sensor_msgs/JointState joint_state\n"
"\n"
"# Joints that may have multiple DOF are specified here\n"
"sensor_msgs/MultiDOFJointState multi_dof_joint_state\n"
"\n"
"# Attached collision objects (attached to some link on the robot)\n"
"AttachedCollisionObject[] attached_collision_objects\n"
"\n"
"# Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene\n"
"# This is mostly important for handling the attached bodies (whether or not to clear the attached bodies\n"
"# of a moveit::core::RobotState before updating it with this message)\n"
"bool is_diff\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/JointState\n"
"# This is a message that holds data to describe the state of a set of torque controlled joints. \n"
"#\n"
"# The state of each joint (revolute or prismatic) is defined by:\n"
"#  * the position of the joint (rad or m),\n"
"#  * the velocity of the joint (rad/s or m/s) and \n"
"#  * the effort that is applied in the joint (Nm or N).\n"
"#\n"
"# Each joint is uniquely identified by its name\n"
"# The header specifies the time at which the joint states were recorded. All the joint states\n"
"# in one message have to be recorded at the same time.\n"
"#\n"
"# This message consists of a multiple arrays, one for each part of the joint state. \n"
"# The goal is to make each of the fields optional. When e.g. your joints have no\n"
"# effort associated with them, you can leave the effort array empty. \n"
"#\n"
"# All arrays in this message should have the same size, or be empty.\n"
"# This is the only way to uniquely associate the joint name with the correct\n"
"# states.\n"
"\n"
"\n"
"Header header\n"
"\n"
"string[] name\n"
"float64[] position\n"
"float64[] velocity\n"
"float64[] effort\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/MultiDOFJointState\n"
"# Representation of state for joints with multiple degrees of freedom, \n"
"# following the structure of JointState.\n"
"#\n"
"# It is assumed that a joint in a system corresponds to a transform that gets applied \n"
"# along the kinematic chain. For example, a planar joint (as in URDF) is 3DOF (x, y, yaw)\n"
"# and those 3DOF can be expressed as a transformation matrix, and that transformation\n"
"# matrix can be converted back to (x, y, yaw)\n"
"#\n"
"# Each joint is uniquely identified by its name\n"
"# The header specifies the time at which the joint states were recorded. All the joint states\n"
"# in one message have to be recorded at the same time.\n"
"#\n"
"# This message consists of a multiple arrays, one for each part of the joint state. \n"
"# The goal is to make each of the fields optional. When e.g. your joints have no\n"
"# wrench associated with them, you can leave the wrench array empty. \n"
"#\n"
"# All arrays in this message should have the same size, or be empty.\n"
"# This is the only way to uniquely associate the joint name with the correct\n"
"# states.\n"
"\n"
"Header header\n"
"\n"
"string[] joint_names\n"
"geometry_msgs/Transform[] transforms\n"
"geometry_msgs/Twist[] twist\n"
"geometry_msgs/Wrench[] wrench\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
"\n"
"================================================================================\n"
"MSG: moveit_msgs/AttachedCollisionObject\n"
"# The CollisionObject will be attached with a fixed joint to this link\n"
"string link_name\n"
"\n"
"#This contains the actual shapes and poses for the CollisionObject\n"
"#to be attached to the link\n"
"#If action is remove and no object.id is set, all objects\n"
"#attached to the link indicated by link_name will be removed\n"
"CollisionObject object\n"
"\n"
"# The set of links that the attached objects are allowed to touch\n"
"# by default - the link_name is already considered by default\n"
"string[] touch_links\n"
"\n"
"# If certain links were placed in a particular posture for this object to remain attached \n"
"# (e.g., an end effector closing around an object), the posture necessary for releasing\n"
"# the object is stored here\n"
"trajectory_msgs/JointTrajectory detach_posture\n"
"\n"
"# The weight of the attached object, if known\n"
"float64 weight\n"
"\n"
"================================================================================\n"
"MSG: moveit_msgs/CollisionObject\n"
"# A header, used for interpreting the poses\n"
"Header header\n"
"\n"
"# The id of the object (name used in MoveIt)\n"
"string id\n"
"\n"
"# The object type in a database of known objects\n"
"object_recognition_msgs/ObjectType type\n"
"\n"
"# The collision geometries associated with the object.\n"
"# Their poses are with respect to the specified header\n"
"\n"
"# Solid geometric primitives\n"
"shape_msgs/SolidPrimitive[] primitives\n"
"geometry_msgs/Pose[] primitive_poses\n"
"\n"
"# Meshes\n"
"shape_msgs/Mesh[] meshes\n"
"geometry_msgs/Pose[] mesh_poses\n"
"\n"
"# Bounding planes (equation is specified, but the plane can be oriented using an additional pose)\n"
"shape_msgs/Plane[] planes\n"
"geometry_msgs/Pose[] plane_poses\n"
"\n"
"# Adds the object to the planning scene. If the object previously existed, it is replaced.\n"
"byte ADD=0\n"
"\n"
"# Removes the object from the environment entirely (everything that matches the specified id)\n"
"byte REMOVE=1\n"
"\n"
"# Append to an object that already exists in the planning scene. If the object does not exist, it is added.\n"
"byte APPEND=2\n"
"\n"
"# If an object already exists in the scene, new poses can be sent (the geometry arrays must be left empty)\n"
"# if solely moving the object is desired\n"
"byte MOVE=3\n"
"\n"
"# Operation to be performed\n"
"byte operation\n"
"\n"
"================================================================================\n"
"MSG: object_recognition_msgs/ObjectType\n"
"################################################## OBJECT ID #########################################################\n"
"\n"
"# Contains information about the type of a found object. Those two sets of parameters together uniquely define an\n"
"# object\n"
"\n"
"# The key of the found object: the unique identifier in the given db\n"
"string key\n"
"\n"
"# The db parameters stored as a JSON/compressed YAML string. An object id does not make sense without the corresponding\n"
"# database. E.g., in object_recognition, it can look like: \"{'type':'CouchDB', 'root':'http://localhost'}\"\n"
"# There is no conventional format for those parameters and it's nice to keep that flexibility.\n"
"# The object_recognition_core as a generic DB type that can read those fields\n"
"# Current examples:\n"
"# For CouchDB:\n"
"#   type: 'CouchDB'\n"
"#   root: 'http://localhost:5984'\n"
"#   collection: 'object_recognition'\n"
"# For SQL household database:\n"
"#   type: 'SqlHousehold'\n"
"#   host: 'wgs36'\n"
"#   port: 5432\n"
"#   user: 'willow'\n"
"#   password: 'willow'\n"
"#   name: 'household_objects'\n"
"#   module: 'tabletop'\n"
"string db\n"
"\n"
"================================================================================\n"
"MSG: shape_msgs/SolidPrimitive\n"
"# Define box, sphere, cylinder, cone \n"
"# All shapes are defined to have their bounding boxes centered around 0,0,0.\n"
"\n"
"uint8 BOX=1\n"
"uint8 SPHERE=2\n"
"uint8 CYLINDER=3\n"
"uint8 CONE=4\n"
"\n"
"# The type of the shape\n"
"uint8 type\n"
"\n"
"\n"
"# The dimensions of the shape\n"
"float64[] dimensions\n"
"\n"
"# The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array\n"
"\n"
"# For the BOX type, the X, Y, and Z dimensions are the length of the corresponding\n"
"# sides of the box.\n"
"uint8 BOX_X=0\n"
"uint8 BOX_Y=1\n"
"uint8 BOX_Z=2\n"
"\n"
"\n"
"# For the SPHERE type, only one component is used, and it gives the radius of\n"
"# the sphere.\n"
"uint8 SPHERE_RADIUS=0\n"
"\n"
"\n"
"# For the CYLINDER and CONE types, the center line is oriented along\n"
"# the Z axis.  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component\n"
"# of dimensions gives the height of the cylinder (cone).  The\n"
"# CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the\n"
"# radius of the base of the cylinder (cone).  Cone and cylinder\n"
"# primitives are defined to be circular. The tip of the cone is\n"
"# pointing up, along +Z axis.\n"
"\n"
"uint8 CYLINDER_HEIGHT=0\n"
"uint8 CYLINDER_RADIUS=1\n"
"\n"
"uint8 CONE_HEIGHT=0\n"
"uint8 CONE_RADIUS=1\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: shape_msgs/Mesh\n"
"# Definition of a mesh\n"
"\n"
"# list of triangles; the index values refer to positions in vertices[]\n"
"MeshTriangle[] triangles\n"
"\n"
"# the actual vertices that make up the mesh\n"
"geometry_msgs/Point[] vertices\n"
"\n"
"================================================================================\n"
"MSG: shape_msgs/MeshTriangle\n"
"# Definition of a triangle's vertices\n"
"uint32[3] vertex_indices\n"
"\n"
"================================================================================\n"
"MSG: shape_msgs/Plane\n"
"# Representation of a plane, using the plane equation ax + by + cz + d = 0\n"
"\n"
"# a := coef[0]\n"
"# b := coef[1]\n"
"# c := coef[2]\n"
"# d := coef[3]\n"
"\n"
"float64[4] coef\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectory\n"
"Header header\n"
"string[] joint_names\n"
"JointTrajectoryPoint[] points\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectoryPoint\n"
"# Each trajectory point specifies either positions[, velocities[, accelerations]]\n"
"# or positions[, effort] for the trajectory to be executed.\n"
"# All specified values are in the same order as the joint names in JointTrajectory.msg\n"
"\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] effort\n"
"duration time_from_start\n"
"\n"
"================================================================================\n"
"MSG: bio_ik_msgs/PositionGoal\n"
"# The name of this goal's end effector link\n"
"string link_name\n"
"\n"
"# Weight of the current goal\n"
"# Goals with a higher weight will have a stronger influence than goals with a smaller weight\n"
"float64 weight\n"
"\n"
"# The goal position into which the end effector link shall be brought\n"
"geometry_msgs/Point position\n"
"\n"
"================================================================================\n"
"MSG: bio_ik_msgs/OrientationGoal\n"
"# The name of this goal's end effector link\n"
"string link_name\n"
"\n"
"# Weight of the current goal\n"
"# Goals with a higher weight will have a stronger influence than goals with a smaller weight\n"
"float64 weight\n"
"\n"
"# The goal orientation into which the end effector link shall be brought\n"
"geometry_msgs/Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: bio_ik_msgs/PoseGoal\n"
"# The name of this goal's end effector link\n"
"string link_name\n"
"\n"
"# Weight of the current goal\n"
"# Goals with a higher weight will have a stronger influence than goals with a smaller weight\n"
"float64 weight\n"
"\n"
"# The goal pose into which the end effector link shall be brought\n"
"geometry_msgs/Pose pose\n"
"\n"
"# How rotational errors will be weighted in relation to positional errors\n"
"float64 rotation_scale\n"
"\n"
"================================================================================\n"
"MSG: bio_ik_msgs/LookAtGoal\n"
"# The name of this goal's end effector link\n"
"string link_name\n"
"\n"
"# Weight of the current goal\n"
"# Goals with a higher weight will have a stronger influence than goals with a smaller weight\n"
"float64 weight\n"
"\n"
"# The axis in the link's local coordinate frame which shall point towards the target\n"
"geometry_msgs/Vector3 axis\n"
"\n"
"# The target point which the axis shall point at\n"
"geometry_msgs/Point target\n"
"\n"
"================================================================================\n"
"MSG: bio_ik_msgs/MinDistanceGoal\n"
"# The name of this goal's end effector link\n"
"string link_name\n"
"\n"
"# Weight of the current goal\n"
"# Goals with a higher weight will have a stronger influence than goals with a smaller weight\n"
"float64 weight\n"
"\n"
"# The distance will be computed from the origin of the end effector link to the target point\n"
"geometry_msgs/Point target\n"
"\n"
"# Minimum allowed distance\n"
"# Forces the end effector link to be at least the specified distance away from the target\n"
"float64 distance\n"
"\n"
"================================================================================\n"
"MSG: bio_ik_msgs/MaxDistanceGoal\n"
"# The name of this goal's end effector link\n"
"string link_name\n"
"\n"
"# Weight of the current goal\n"
"# Goals with a higher weight will have a stronger influence than goals with a smaller weight\n"
"float64 weight\n"
"\n"
"# The distance will be computed from the origin of the end effector link to the target point\n"
"geometry_msgs/Point target\n"
"\n"
"# Maximum allowed distance\n"
"# Forces the end effector link to be at most the specified distance away from the target\n"
"float64 distance\n"
"\n"
"================================================================================\n"
"MSG: bio_ik_msgs/LineGoal\n"
"# The name of this goal's end effector link\n"
"string link_name\n"
"\n"
"# Weight of the current goal\n"
"# Goals with a higher weight will have a stronger influence than goals with a smaller weight\n"
"float64 weight\n"
"\n"
"# A point on the line\n"
"geometry_msgs/Point position\n"
"\n"
"# Direction of the line\n"
"geometry_msgs/Vector3 direction\n"
"\n"
"================================================================================\n"
"MSG: bio_ik_msgs/TouchGoal\n"
"# The name of this goal's end effector link\n"
"string link_name\n"
"\n"
"# Weight of the current goal\n"
"# Goals with a higher weight will have a stronger influence than goals with a smaller weight\n"
"float64 weight\n"
"\n"
"# A point on the plane that shall be touched by the end effector link mesh\n"
"geometry_msgs/Point position\n"
"\n"
"# The normal of the plane that shall be touched by the end effector link mesh\n"
"geometry_msgs/Vector3 normal\n"
"\n"
"================================================================================\n"
"MSG: bio_ik_msgs/AvoidJointLimitsGoal\n"
"# Weight of the current goal\n"
"# Goals with a higher weight will have a stronger influence than goals with a smaller weight\n"
"float64 weight\n"
"\n"
"# If set to true, the goal will be primary goal (like eg. position goals)\n"
"# If set to false, this goal will always have lower priority than the primary goals\n"
"bool primary\n"
"\n"
"================================================================================\n"
"MSG: bio_ik_msgs/CenterJointsGoal\n"
"# Weight of the current goal\n"
"# Goals with a higher weight will have a stronger influence than goals with a smaller weight\n"
"float64 weight\n"
"\n"
"# If set to true, the goal will be primary goal (like eg. position goals)\n"
"# If set to false, this goal will always have lower priority than the primary goals\n"
"bool primary\n"
"\n"
"================================================================================\n"
"MSG: bio_ik_msgs/MinimalDisplacementGoal\n"
"# Weight of the current goal\n"
"# Goals with a higher weight will have a stronger influence than goals with a smaller weight\n"
"float64 weight\n"
"\n"
"# If set to true, the goal will be primary goal (like eg. position goals)\n"
"# If set to false, this goal will always have lower priority than the primary goals\n"
"bool primary\n"
"\n"
"================================================================================\n"
"MSG: bio_ik_msgs/JointVariableGoal\n"
"# The name of the joint variable\n"
"string variable_name\n"
"\n"
"# The desired position value of the joint variable\n"
"float64 variable_position\n"
"\n"
"# Weight of the current goal\n"
"# Goals with a higher weight will have a stronger influence than goals with a smaller weight\n"
"float64 weight\n"
"\n"
"# If set to false, the goal will be primary goal (like eg. position goals)\n"
"# If set to true, this goal will always have lower priority than the primary goals\n"
"bool secondary\n"
"\n"
"================================================================================\n"
"MSG: bio_ik_msgs/BalanceGoal\n"
"# Weight of the current goal\n"
"# Goals with a higher weight will have a stronger influence than goals with a smaller weight\n"
"float64 weight\n"
"\n"
"# The center of gravity will be pulled above this target point\n"
"geometry_msgs/Point target\n"
"\n"
"# Gravity vector (optional)\n"
"geometry_msgs/Vector3 axis\n"
"\n"
"================================================================================\n"
"MSG: bio_ik_msgs/SideGoal\n"
"# The name of this goal's end effector link\n"
"string link_name\n"
"\n"
"# Weight of the current goal\n"
"# Goals with a higher weight will have a stronger influence than goals with a smaller weight\n"
"float64 weight\n"
"\n"
"geometry_msgs/Vector3 axis\n"
"\n"
"geometry_msgs/Vector3 direction\n"
"\n"
"================================================================================\n"
"MSG: bio_ik_msgs/DirectionGoal\n"
"# The name of this goal's end effector link\n"
"string link_name\n"
"\n"
"# Weight of the current goal\n"
"# Goals with a higher weight will have a stronger influence than goals with a smaller weight\n"
"float64 weight\n"
"\n"
"geometry_msgs/Vector3 axis\n"
"\n"
"geometry_msgs/Vector3 direction\n"
"\n"
"================================================================================\n"
"MSG: bio_ik_msgs/ConeGoal\n"
"# The name of this goal's end effector link\n"
"string link_name\n"
"\n"
"# Weight of the current goal\n"
"# Goals with a higher weight will have a stronger influence than goals with a smaller weight\n"
"float64 weight\n"
"\n"
"geometry_msgs/Point position\n"
"float64 position_weight\n"
"geometry_msgs/Vector3 axis\n"
"geometry_msgs/Vector3 direction\n"
"float64 angle\n"
;
  }

  static const char* value(const ::bio_ik_msgs::GetIKRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bio_ik_msgs::GetIKRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ik_request);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetIKRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bio_ik_msgs::GetIKRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bio_ik_msgs::GetIKRequest_<ContainerAllocator>& v)
  {
    s << indent << "ik_request: ";
    s << std::endl;
    Printer< ::bio_ik_msgs::IKRequest_<ContainerAllocator> >::stream(s, indent + "  ", v.ik_request);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BIO_IK_MSGS_MESSAGE_GETIKREQUEST_H
